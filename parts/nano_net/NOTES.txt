Basic idea: instead of one big monolithic Arduino, we have dedicated motor controller micros, in their own 3D-printed cases.  E.g., one left side, one right side, one for mining head.


+ Use simpler, more reliable parts (spare electronics possible)
+ Less wire crossing the robot
- More parts to build


UN178 motor controller x2, each doing 2 motors (4 total motors)

	2x PWM inputs, one each for A and B motors
	4x digital inputs for A and B sides
	gnd in

3-pin encoder inputs (x4? x6?).  Servo 3-pin cables: gnd, 5v, encoder
	1 per controlled motor
	Plus 2 spares: redundant encoders, bag up/down, etc.

With short jumpers, 121ohm current limiters, and 2Kohm pull-up resistors, analog pins read:
  dn 1022-1023 when open
  dn 16-17 when shorted to ground
Probably a dn threshold of 200 or higher would be about right.


RJ-45 serial uplink to main controller: 5v (orange), ground (orange-white), tx0 (brown), rx0 (green)

Nano PWM-capable pins: 3, 5, 6, 9, 10, 11

m[0] LA motor: dir 12(green),A0(red)  PWM 11
m[1] LB motor: dir 9(green),8(red)   PWM 10   (both 490Hz)

m[2] RA motor: dir 2(green),4(red)  PWM 3    (normal 490Hz pin)
m[3] RB motor: dir 5(green),7(red)  PWM 6    (the fast 980Hz pin)


With two UN178's plugged in, current draw is 0.07-0.15A at 12VDC side.


If we target a 500Hz motor update, we have 2ms per cycle.
At 115200 baud, we should be pushing 10KB/sec, or 10 bytes/ms.
So blipping out an A-packet with 6 byte-long encoder counts is probably fine.


// This command is sent from the main Mega down to the Nanos over serial.
typedef struct nano_net_command {
  unsigned char torqueMode:4; // For each motor: 0-speed control.  1-torque control (no PID)
  unsigned char stop:1; // stop all motors
  unsigned char pad1:3; // reserved for future use
  
  signed char speed[4]; // speed/torque for each motor, from -100 (full backward) to +100 (full forward)
};

// This sensor packet is sent back from the Nanos up to the main Mega over serial.
typedef struct nano_net_sensors {
  unsigned char stall:4; // For each motor: 0-not stalled.  1-currently stalled.
  unsigned char pad1:4; // reserved for future use
  
  unsigned char raw:6; // 6 raw encoder pins (for debugging, or for level-triggered stuff)
  unsigned char ok:1; // 0- no commands recently.  1- nano is receiving commands regularly.
  unsigned char pad2:1; // reserved for future use
  
  unsigned char counts[6]; // up/down counts for each motor encoder, plus monotonic counts for [5] and [6].
};





